//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub uid: i64,
    #[sea_orm(unique)]
    pub username: String,
    #[sea_orm(column_type = "Text")]
    pub nickname: String,
    pub avatar: Option<String>,
    pub gender: Option<String>,
    pub date_of_birth: Option<Date>,
    pub country: Option<String>,
    pub city: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub signature: Option<String>,
    pub banner_image: Option<String>,
    pub banned: Option<Json>,
    pub groups: Vec<String>,
    pub created_at: DateTime,
    pub last_logined_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::lyrics::Entity")]
    Lyrics,
    #[sea_orm(has_many = "super::song_comment::Entity")]
    SongComment,
    #[sea_orm(has_one = "super::user_auth_password::Entity")]
    UserAuthPassword,
}

impl Related<super::lyrics::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Lyrics.def()
    }
}

impl Related<super::song_comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SongComment.def()
    }
}

impl Related<super::user_auth_password::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserAuthPassword.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
