//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "song_comment")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub song_comment_id: i64,
    pub song: i64,
    pub parent: Option<i64>,
    pub created_by: i64,
    #[sea_orm(column_type = "Text")]
    pub text: String,
    pub attachments: Option<Vec<String>>,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::song::Entity",
        from = "Column::Song",
        to = "super::song::Column::SongId",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Song,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::CreatedBy",
        to = "super::user::Column::Uid",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::song::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Song.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
