//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "song")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub song_id: i64,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    pub album: i64,
    pub uploader: i64,
    pub origin_audio: String,
    pub listen_policy: Option<Json>,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::album::Entity",
        from = "Column::Album",
        to = "super::album::Column::AlbumId",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Album,
    #[sea_orm(has_many = "super::lyrics::Entity")]
    Lyrics,
    #[sea_orm(has_many = "super::song_comment::Entity")]
    SongComment,
}

impl Related<super::album::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Album.def()
    }
}

impl Related<super::lyrics::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Lyrics.def()
    }
}

impl Related<super::song_comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SongComment.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
